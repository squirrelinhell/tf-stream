#!/usr/bin/python3

import sys

if len(sys.argv) < 2:
    sys.stderr.write("\nUsage:\n\n");
    sys.stderr.write("\ttrain_mnist_conv <output.model>\n\n")
    sys.exit(1)

import os
import loadsave
import numpy as np
import tensorflow as tf
import tensorflow.examples.tutorials.mnist as tf_mnist

from utils import *

def dense(x, out_dim):
    with tf.name_scope("dense"):
        in_dim = np.prod([
            1 if v is None else v
            for v in x.shape.as_list()
        ])
        x = tf.reshape(x, [-1, in_dim])
        b = tf.Variable(tf.constant(0.1, shape = [out_dim]))
        w = tf.Variable(tf.truncated_normal(
            [in_dim, out_dim],
            stddev = 0.1
        ))
        return tf.matmul(x, w) + b

def conv(x, ksize, filters, stride = 1):
    with tf.name_scope("conv"):
        in_channels = x.shape[-1].value
        b = tf.Variable(tf.constant(0.1, shape = [filters]))
        w = tf.Variable(tf.truncated_normal(
            [ksize, ksize, in_channels, filters],
            stddev = 0.1
        ))
        return tf.nn.conv2d(
            x, w,
            strides = [1, stride, stride, 1],
            padding = 'SAME'
        ) + b

def maxpool(x, size):
    with tf.name_scope("maxpool"):
        return tf.nn.max_pool(
            x,
            ksize = [1, size, size, 1],
            strides = [1, size, size, 1],
            padding = 'SAME'
        )

def trainable_parameters():
    return sum([
        np.prod(v.shape.as_list())
        for v in tf.trainable_variables()
    ])

def create_layers(inp, layers):
    params = trainable_parameters()
    print_info(
        "%30s Input: %d params"
        % (y.shape, params)
    )
    for i in range(len(layers)):
        with tf.name_scope("layer_%d" % (i+1)):
            y = layers[i](y)
        new_params = trainable_parameters() - params
        print_info(
            "%30s Layer %d: %d params"
            % (y.shape, i+1, new_params)
        )
        params += new_params

def create_model():
    x = tf.placeholder(tf.float32, [None, 28, 28], name = "x")
    t = tf.placeholder(tf.float32, [None, 10], name = "t")
    dropout = tf.placeholder_with_default(0.0, [], name = "dropout")

    layers = [
        lambda l: tf.nn.relu(conv(l, 3, 32)),
        lambda l: maxpool(l, 2),
        lambda l: tf.nn.dropout(l, 1.0 - dropout),
        lambda l: tf.nn.relu(conv(l, 3, 64)),
        lambda l: maxpool(l, 2),
        lambda l: tf.nn.dropout(l, 1.0 - dropout),
        lambda l: tf.nn.relu(dense(l, 1024)),
        lambda l: tf.nn.dropout(l, 1.0 - dropout),
        lambda l: dense(l, 10)
    ]

    y = create_layers(tf.reshape(x, [-1, 28, 28, 1]), layers)

    correct = tf.equal(tf.argmax(y, 1), tf.argmax(t, 1))
    correct = tf.cast(correct, tf.float32)

    tf.cast(tf.reduce_sum(1.0 - correct), tf.int64, name = "mistakes")
    tf.reduce_mean(correct, name = "accuracy")

    tf.nn.softmax(y, 1, name = "y")

    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=t, logits=y),
        name = "loss"
    )

    global_step = tf.contrib.framework.get_or_create_global_step()

    tf.train.AdamOptimizer(0.0001).minimize(
        loss,
        global_step = global_step,
        name = "train"
    )

def compute_stats(s, batch):
    x_v, t_v = batch
    x_v = np.reshape(x_v, [-1, 28, 28])
    num_samples = len(x_v)
    if num_samples <= 1024:
        v = s.run(
            [s.accuracy, s.loss, s.mistakes],
            feed_dict = {s.x: x_v, s.t: t_v}
        )
        return {
            "accuracy": v[0],
            "loss": v[1],
            "mistakes": v[2],
            "samples": num_samples
        }

    # Split computation into batches of 1024
    ret = {}
    while len(x_v) > 0:
        part = x_v[0:1024], t_v[0:1024]
        x_v, t_v = x_v[1024:], t_v[1024:]
        part_stat = compute_stats(s, part)
        part_stat["accuracy"] *= len(part[0])
        part_stat["loss"] *= len(part[0])
        ret = dict_sum(ret, part_stat)
    ret["accuracy"] /= num_samples
    ret["loss"] /= num_samples
    return ret

def format_stats(v):
    return "%6.2f%% (%d/%d), loss=%f" % (
        v["accuracy"] * 100.0,
        v["samples"] - v["mistakes"],
        v["samples"],
        v["loss"]
    )

def print_stats(s, mnist):
    sys.stderr.write("%10d: " % s.global_step.eval())
    sys.stderr.flush()
    v = compute_stats(s, (mnist.train.images, mnist.train.labels))
    sys.stderr.write(" [train] %s " % format_stats(v))
    sys.stderr.flush()
    v = compute_stats(s, (mnist.test.images, mnist.test.labels))
    sys.stderr.write(" [test]%s\n" % format_stats(v))
    sys.stderr.flush()
    return v

def train_batch(s, batch):
    x_v, t_v = batch
    x_v = np.reshape(x_v, [-1, 28, 28])
    s.run(
        s.train,
        feed_dict = {s.x: x_v, s.t: t_v, s.dropout: 0.5}
    )

def train(s, mnist):
    top_accuracy = 0.0
    batch_size = 100
    while True:
        for _ in range(100000 // batch_size):
            train_batch(s, mnist.train.next_batch(batch_size))
        accuracy = print_stats(s, mnist)["accuracy"]
        if accuracy > 0.99 and accuracy > 0.1 + 0.9 * top_accuracy:
            top_accuracy = accuracy
            loadsave.save(s, sys.argv[1])

def run():
    mnist = tf_mnist.input_data.read_data_sets(
        "__mnist__",
        one_hot = True
    )
    with loadsave.load(sys.argv[1], create_model = create_model) as s:
        print_info("Training model...")
        train(s, mnist)

if __name__ == "__main__":
    run()
