#!/usr/bin/env python3

import os
import sys
import loadsave
import numpy as np
import tensorflow as tf
import tensorflow.examples.tutorials.mnist as tf_mnist

def dense(x, o):
    i = x.shape[1].value
    sd = 2. / (i + o)
    b = tf.Variable(tf.constant(0.1, shape=[o]))
    w = tf.Variable(tf.random_normal([i, o], stddev=sd))
    return tf.matmul(x, w) + b

def create_model():
    x = tf.placeholder(tf.float32, [None, 28, 28], name="x")

    y = tf.reshape(x, [-1, 28*28])
    y = dense(y, 100)
    y = tf.nn.relu(y)
    y = dense(y, 100)
    y = tf.nn.relu(y)
    y = dense(y, 10)

    t = tf.placeholder(tf.float32, [None, 10], name="t")

    loss = tf.reduce_mean(
        tf.nn.softmax_cross_entropy_with_logits(labels=t, logits=y),
        name="loss"
    )

    tf.reduce_mean(
        tf.cast(
            tf.equal(tf.argmax(y, 1), tf.argmax(t, 1)),
            tf.float32
        ),
        name="accuracy"
    )

    tf.nn.softmax(y, 1, name="y")

    global_step = tf.contrib.framework.get_or_create_global_step()

    tf.train.GradientDescentOptimizer(0.1).minimize(
        loss,
        global_step = global_step,
        name = "train"
    )

def get_stats(s, dataset):
    x_v, t_v = dataset.images, dataset.labels
    x_v = np.reshape(x_v, [-1, 28, 28])
    v = s.run(
        [s.accuracy, s.loss],
        feed_dict = {s.x: x_v, s.t: t_v}
    )
    return "%6.2f%%, loss=%f" % (v[0] * 100.0, v[1])

def train_batch(s, batch):
    x_v, t_v = batch
    x_v = np.reshape(x_v, [-1, 28, 28])
    s.run(
        s.train,
        feed_dict = {s.x: x_v, s.t: t_v}
    )

def train_epoch(s, mnist):
    sys.stderr.write("Training model...\n")
    sys.stderr.flush()
    for _ in range(10):
        for _ in range(1000):
            train_batch(s, mnist.train.next_batch(200))
        sys.stderr.write("%10d: " % s.global_step.eval())
        sys.stderr.flush()
        sys.stderr.write("  [train] %s" % get_stats(s, mnist.train))
        sys.stderr.write("  [test] %s\n" % get_stats(s, mnist.test))
        sys.stderr.flush()
    loadsave.save(s, sys.argv[1])

def run():
    if len(sys.argv) < 2:
        sys.stderr.write("\nUsage:\n\n");
        sys.stderr.write("\ttrain_mnist_simple <output.model>\n\n")
        sys.exit(1)

    mnist = tf_mnist.input_data.read_data_sets(
        "__mnist__",
        one_hot = True
    )
    with loadsave.load(sys.argv[1], create_model = create_model) as s:
        train_epoch(s, mnist)

if __name__ == "__main__":
    run()
