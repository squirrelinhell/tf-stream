#!/usr/bin/env python3

import sys
import numpy as np

import loadsave

def run_stdio(sess, x, y):
    x_shape = [1 if v is None else v for v in x.shape.as_list()]
    x_size = np.prod(x_shape)

    while True:
        buf = sys.stdin.buffer.read(x_size)
        if len(buf) < x_size:
            break

        x_val = np.frombuffer(buf, dtype="uint8")
        buf = bytes()

        x_val = np.reshape(x_val, x_shape)
        x_val = x_val.astype("float32") / 256.0

        y_val = sess.run(y, feed_dict = {x: x_val})

        y_val = np.clip(y_val * 256.0, 0.0, 255.1)
        y_val = y_val.astype("uint8")

        try:
            sys.stdout.buffer.write(y_val.tobytes())
            sys.stdout.buffer.flush()
        except:
            break

def run():
    if len(sys.argv) < 4:
        sys.stderr.write("\nUsage:\n\n");
        sys.stderr.write("\tmodel_run <dir.model> <input tensor> <output tensor>\n\n")
        sys.exit(1)

    if sys.stdout.isatty():
        sys.stderr.write("Error: Refusing to write binary data to a terminal\n")
        sys.exit(1)

    with loadsave.load(sys.argv[1]) as sess:
        x = sess.graph.get_tensor_by_name(sys.argv[2])
        y = sess.graph.get_tensor_by_name(sys.argv[3])
        run_stdio(sess, x, y)

if __name__ == "__main__":
    run()
